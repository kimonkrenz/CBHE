---
title: "CBHE Address Matching"
author: "Kimon Krenz"
date: "30/06/2022"
output: html_document
---

# Setup

## Load Required Packages
```{r message=FALSE, warning=FALSE, include=FALSE, paged.print=FALSE}
knitr::opts_chunk$set(echo = TRUE)

## Load all required packages

library(RPostgreSQL)
library(stringr)
library(tidyverse)
library(tidytext)
library(stringdist)
library(dplyr)
library(plyr)

# create "not in" function
`%ni%` <- function(x,y) !(x %in% y) 
```

## Establish Database Connection
```{r message=FALSE, warning=FALSE, include=FALSE, paged.print=FALSE}
## Establish database connection

# create a connection
pw <- {
  "define pw"
}

# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "cbhe_db",
                 host = "localhost", port = 5432,
                 user = "username", password = pw)
rm(pw)# removes the password`enter code here`

# list all tables
#dbListTables(con)
```

# Load Address Data from Files into Postgres

```{r eval=FALSE, message=FALSE, warning=FALSE, include=FALSE, paged.print=FALSE}
# select source folder
source_path <- "/filepath/Addressdata"

# get list of all files, read all files into list & row bind into single file
x <- base::list.files(path = source_path, pattern = ".csv", full.names = TRUE) %>% lapply(fread) %>% bind_rows %>% rename_with(~ tolower(.x))

y <- gp_matched_full %>% dplyr::distinct_all(.)

# write table to postgres
dbWriteTable(con, "gp_addresses", x, overwrite = TRUE, append = FALSE, row.names = FALSE)

# clean up
rm(source_path,x)
```

# Load Data from Postgres database or a direct file, if the latter replace dbGetQuery with, e.g., read.csv()

## Get AddressBase Premium
```{r message=FALSE, warning=FALSE, paged.print=FALSE}

df_ab <- dbGetQuery(con,
  paste0("
SELECT 	uprn, 
		department_name, 
		organisation_name, 
		sub_building_name, 
		building_name, 
		building_number,
		po_box_number,
		dependent_thoroughfare,
		thoroughfare,
		double_dependent_locality,
		dependent_locality,
    		post_town,
    		postcode
	FROM abp_blpu

    	LEFT JOIN public.abp_delivery_point USING (uprn);
 ")
  
) %>% 
  dplyr::mutate(across(where(anyNA), ~ replace_na(.,""))) %>% 
  calc_addressbase_premium_single_line_address(., include_postcode = FALSE) %>% 
  tidy_single_line_address(., single_line_address) %>% 
  tidy_postcode(., postcode)

```

## Get GP Addresses from Postgres database or a direct file, if the latter replace dbGetQuery with, e.g., read.csv()
```{r message=FALSE, warning=FALSE, paged.print=FALSE}

df_gp <- dbGetQuery(con,
  paste0("
SELECT 	*, fullpostcode AS postcode
		FROM gp_addresses;
")
  
) %>% 
  dplyr::mutate(across(where(anyNA), ~ replace_na(.,""))) %>% 
  calc_gp_address_single_line_address(., include_postcode = FALSE) %>% 
  tidy_single_line_address(., single_line_address) %>% 
  tidy_postcode(., postcode)

```

## Prepare Input
```{r}

# AddressBase Premium
df_ab <- input_addresses(df_ab, "postcode", "single_line_address", "uprn") %>% dplyr::filter(., single_line_address != "", postcode != "")

# GP Addresses
df_gp_m <- input_addresses(df_gp, "postcode", "single_line_address", "rowidentifier") %>% dplyr::distinct(postcode, single_line_address, .keep_all = TRUE) %>% dplyr::filter(., single_line_address != "", postcode != "")

# Split into n equal parts
df_gp_s <- split(df_gp_m, factor(sort(rank(row.names(df_gp_m)) %% 5 # specify number of equal parts
                                      )))
```

# Match Addresses

## Generate Output
```{r eval=FALSE, message=FALSE, warning=FALSE, include=FALSE, paged.print=FALSE}
# Create emtpy list
matched <- list()

# Loop over GP address parts for better performance
for (i in 1:length(df_gp_s)) {
  
matched[[i]]  <-  calc_match_addresses(
  df_gp_s[[i]], "postcode", "single_line_address", "rowidentifier",
  df_ab, "postcode", "single_line_address", "uprn"
                )

}

# clean up
rm(df_gp_m, df_gp_s)

# bind list entries by row
matched <- dplyr::bind_rows(matched)

# write resulting table to postgres
dbWriteTable(con, "gp_matched", matched, overwrite = TRUE, append = FALSE, row.names = FALSE)

# sort table remove redundant information
matched <- matched %>%
  dplyr::arrange(desc(score), match_type, postcode, single_line_address) %>% 
  dplyr::distinct(single_line_address, .keep_all = TRUE) #%>% 
  #dplyr::filter(score >= 0.7)

df_gp_matched <- dplyr::left_join(df_gp, matched[,c("uprn","score","match_type","single_line_address","single_line_address_lookup")], by = "single_line_address")

# write resulting table to postgres or direct file, if the latter replace with, e.g., write.csv()
dbWriteTable(con, "gp_matched_full", df_gp_matched, overwrite = TRUE, append = FALSE, row.names = FALSE)

```
